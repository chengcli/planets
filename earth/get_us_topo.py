import torch
from netCDF4 import Dataset
import numpy as np

def load_white_sand_topo(filename: str, resolution: str):
    module = torch.jit.load(filename)
    state_dict = module.state_dict()
    data = {k: v.numpy() for k, v in state_dict.items()}

    if resolution in ["10m", "20m", "40m", "80m", "160m"]:
        return data[f"solid_{resolution}"]
    else:
        raise ValueError(f"Unsupported resolution: {resolution}. "
                         "Choose from ['10m', '20m', '40m', '80m', '160m'].")

# write topo data to netcdf file
def write_topo_to_netcdf(topo_data, filename: str, resolution: str):
    res = float(resolution[:-1])  # extract numeric part of resolution
    with Dataset(filename, "w", format="NETCDF4") as ncfile:
        # Define dimensions
        ncfile.createDimension("x3", topo_data.shape[0])
        ncfile.createDimension("x2", topo_data.shape[1])
        ncfile.createDimension("x1", topo_data.shape[2])

        # coordinate variables
        xvar = ncfile.createVariable("x3", "f4", ("x3",))
        yvar = ncfile.createVariable("x2", "f4", ("x2",))
        zvar = ncfile.createVariable("x1", "f4", ("x1",))

        xvar.axis = "X"
        yvar.axis = "Y"
        zvar.axis = "Z"

        xvar[:] = (np.arange(topo_data.shape[0]) * res).astype("f4")
        yvar[:] = (np.arange(topo_data.shape[1]) * res).astype("f4")
        zvar[:] = (np.arange(topo_data.shape[2]) * res).astype("f4")

        # Create variables
        topo_var = ncfile.createVariable("topography_fill", "f4", ("x3", "x2", "x1"))
        topo_var.units = "1"
        topo_var.long_name = f"Filling topography at {resolution} resolution"

        # Write data
        topo_var[:, :] = topo_data

        # Global attributes
        ncfile.description = "Filling topography data loaded from TorchScript"
        ncfile.source = "Generated by write_topo_to_netcdf function"


def test_load_white_sand_topo():
    fname = "topo_24kmx12km_32.7719_32.9881_-106.5098_-106.3802_adjusted.pt"
    resolution = "40m"

    data = load_white_sand_topo(fname, resolution)
    print(f"data shape = {data.shape}")
    write_topo_to_netcdf(data, f"white_sand_topo_{resolution}.nc", resolution)

if __name__ == "__main__":
    test_load_white_sand_topo()
